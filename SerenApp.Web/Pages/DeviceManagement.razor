@page "/device-management"
@attribute [Authorize(Roles = @Logic.AccountLogic.AdminRole)]

@using SerenApp.Core.Interfaces
@using SerenApp.Core.Model
@using System.Linq;

@inject IDeviceRepository Devices
@inject AuthenticationStateProvider AuthenticationStateProvider

<section class="mt-3">
    <h3>Device Management</h3>
</section>

@if (!string.IsNullOrEmpty(status))
{
    <section class="mt-3">
        <Error>@status</Error>
    </section>
}

<section class="mt-3">
    <div class="row">
        <div class="col">
            <label class="form-label">Add new Device</label>
        </div>
        <div class="col">
            <input class="form-control" type="text" placeholder="Device Id" @bind="newDeviceId"/>
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick="AddDevice" disabled=@(loading || string.IsNullOrWhiteSpace(newDeviceId))>
                Add
            </button>
        </div>
    </div>
</section>

<section class="mt-3">
    <h4>Device List</h4>
    @if (loading)
    {
        <Spinner/>
    }
    else
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var device in devices)
                {
                    <tr>
                        <td>@device.ID</td>
                        <td>@device.Name</td>
                        <td><button class="btn btn-outline-primary" @onclick="() => RemoveDevice(device)"><span class="oi oi-trash"></span></button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</section>

@code {

    private List<Core.Model.Device> devices = new List<Core.Model.Device>();
    private string newDeviceId = "";
    private string status = "";
    private bool loading = true;

    private async Task AddDevice()
    {
        status = "";
        Guid parsed;
        loading = true;

        try
        {
            parsed = Guid.Parse(newDeviceId);    
        }
        catch(Exception e)
        {
            status = e.Message;
            loading = false;
            return;
        }

        try
        {
            var device = await Devices.Insert(new Core.Model.Device{ID = parsed, Name = "SerenBracelet", FirmwareVersion = "1.0"});
            devices.Add(device);
        }
        catch(Exception e)
        {
            status = e.Message;
            loading = false;
            return;
        }

        loading = false;
    }

    private async Task RemoveDevice(Core.Model.Device device)
    {
        status = "";

        try
        {
            await Devices.Delete(device);
            devices.Remove(device);
        }
        catch(Exception e)
        {
            status = e.Message;
            return;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        this.devices = (await Devices.GetAll()).ToList();
        loading = false;
    }
}
