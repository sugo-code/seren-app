@page "/devices/{DeviceId}"
@attribute [Authorize(Roles = @Logic.AccountLogic.UserRole)]

@using SerenApp.Core.Interfaces
@using SerenApp.Core.Model

@inject IDeviceRepository Devices
@inject IUserRepository Users
@inject IDeviceDataRepository Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<section class="mt-3">
    <h3>Device</h3>
</section>

@if(!string.IsNullOrEmpty(status))
{
    <section class="mt-3">
        <Error>@status</Error>
    </section>
}

@if(loading)
{
    <Spinner/>
}
else
{
    <section class="mt-3">
        <p>
            <span class="oi oi-wifi"></span> 
            Device Name: @device.Name
            <button class="btn btn-outline-primary" @onclick="() => editDeviceName = !editDeviceName" ><span class="oi oi-pencil"></span></button>
        </p>
        @if(editDeviceName)
        {
            <div class="row">
                <div class="col">
                    <label class="form-label">New Device Name</label>
                </div>
                <div class="col">
                    <input class="form-control" type="text" placeholder="Device Name" @bind="newDeviceName"/>
                </div>
                <div class="col">
                    <button class="btn btn-primary" @onclick="ChangeDeviceName" disabled=@string.IsNullOrWhiteSpace(newDeviceName)>Update</button>
                </div>
            </div>
        }
    </section>

    <section class="mt-3">
        <h4>Device Data</h4>
        <div class="row">
            <div class="col-md">
                <h5>Heart</h5>
                <div class="chart-container">
                    <canvas @ref="HeartChart"></canvas>
                </div>
            </div>
            <div class="col-md">
                <h5>Body</h5>
                <div class="chart-container">
                    <canvas @ref="BodyChart"></canvas>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md">
                <h5>Battery</h5>
                <div class="chart-container">
                    <canvas @ref="BatteryChart"></canvas>
                </div>
            </div>
            <div class="col-md">
                <h5>Serendipity</h5>
                <div class="chart-container">
                    <canvas @ref="SerendipityChart"></canvas>
                </div>
            </div>
        </div>
    </section>
}

@code {

    private User user;
    private Core.Model.Device device;
    private string newDeviceName = "";
    private string status = "";
    private bool loading = true;
    private bool editDeviceName = false;

    [Parameter]
    public string DeviceId { get; set; }

    private IJSObjectReference module;
    private ElementReference HeartChart;
    private ElementReference BodyChart;
    private ElementReference BatteryChart;
    private ElementReference SerendipityChart;

    private async Task ChangeDeviceName()
    {
        status = "";

        device.Name = newDeviceName;

        try
        {
            device = await Devices.Update(device); 
        }
        catch(Exception e)
        {
            status = e.Message;
            return;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loading = true;
            this.user = await Users.GetByPhoneNumber(user.Identity.Name);
            try {
                device = this.user.Devices.First(x => x.ID == Guid.Parse(DeviceId));
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import","./Pages/Device.razor.js");
                RenderCharts();
            }
            catch {
                NavManager.NavigateTo("/");
            }
            finally
            {
                loading = false;
            }
        }
    }

    private async Task RenderCharts()
    {
        var battery = new
        {
            label = "Battery Percentage",
            data = new List<double>(),
            borderColor = "limeGreen",
            backgroundColor = "limeGreen",
            yAxisID = "yBattery"
        };
        var bloodOxygen = new
        {
            label = "Blood Oxygen Percentage",
            data = new List<double>(),
            borderColor = "dodgerBlue",
            backgroundColor = "dodgerBlue",
            yAxisID = "yBloodOxygen"
        };
        var bloodPressure = new
        {
            label = "Blood Pressure",
            data = new List<double>(),
            borderColor = "steelBlue",
            backgroundColor = "steelBlue",
            yAxisID = "yBloodPressure"
        };
        var bodyTemperature = new
        {
            label = "Body Temperature",
            data = new List<double>(),
            borderColor = "paleVioletRed",
            backgroundColor = "paleVioletRed",
            yAxisID = "yBodyTemperature"
        };
        var heartFrequency = new
        {
            label = "Heart Frequency",
            data = new List<int>(),
            borderColor = "tomato",
            backgroundColor = "tomato",
            yAxisID = "yHeartFrequency"
        };
        var serendipity = new
        {
            label = "Serendipity",
            data = new List<int>(),
            borderColor = "darkMagenta",
            backgroundColor = "darkMagenta",
            yAxisID = "ySerendipity"
        };

        var data = (await Data.GetManyByDevice(device)).Where(x => x.ID.Timestamp > DateTime.Now.AddDays(-1));
        var labels = data.Select(x => x.ID.Timestamp);

        foreach(var item in data)
        {
            battery.data.Add(item.Battery);
            bloodOxygen.data.Add(item.BloodOxygen);
            bloodPressure.data.Add(item.BloodPressure);
            bodyTemperature.data.Add(item.BodyTemperature);
            heartFrequency.data.Add(item.HeartFrequency);
            serendipity.data.Add(item.Serendipity);
        }

        var tasks = new[]
        {
            module.InvokeVoidAsync("RenderHeartChart", HeartChart, new
            {
                labels = data.Select(x => x.ID.Timestamp),
                datasets = new List<object>(){heartFrequency, bloodPressure}
            }),
            module.InvokeVoidAsync("RenderBodyChart", BodyChart, new
            {
                labels = data.Select(x => x.ID.Timestamp),
                datasets = new[]{bloodOxygen, bodyTemperature}
            }),
            module.InvokeVoidAsync("RenderBatteryChart", BatteryChart, new
            {
                labels = data.Select(x => x.ID.Timestamp),
                datasets = new[]{battery}
            }),
            module.InvokeVoidAsync("RenderSerendipityChart", SerendipityChart, new
            {
                labels = data.Select(x => x.ID.Timestamp),
                datasets = new[]{serendipity}
            })
        };

        await Task.WhenAll(tasks.Select(x => x.AsTask()));
    }
}
